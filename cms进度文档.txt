一.cms开发环境搭建
	ubuntu16.04虚拟机
	python3.5.2
	django==1.11.15
	pymysql==0.9.2
	django-bootstrap3=11.0.0
	如需其它模块,可以自行安装

二.cms为项目配置目录

cms
├── chart--------------------------------------->在线沟通模块
│   ├── admin.py
│   ├── apps.py
│   ├── __init__.py
│   ├── migrations
│   │   ├── __init__.py
│   │   └── __pycache__
│   │       └── __init__.cpython-35.pyc
│   ├── models.py
│   ├── __pycache__
│   │   ├── admin.cpython-35.pyc
│   │   ├── __init__.cpython-35.pyc
│   │   └── models.cpython-35.pyc
│   ├── tests.py
│   └── views.py
├── cms----------------------------------------->主项目目录
│   ├── __init__.py
│   ├── __pycache__
│   │   ├── __init__.cpython-35.pyc
│   │   ├── settings.cpython-35.pyc
│   │   ├── urls.cpython-35.pyc
│   │   └── wsgi.cpython-35.pyc
│   ├── settings.py----------------------------->主配置文件
│   ├── urls.py--------------------------------->主url配置文件
│   └── wsgi.py
├── dgshowdata---------------------------------->图形化展示模块
│   ├── admin.py
│   ├── apps.py
│   ├── __init__.py
│   ├── migrations
│   │   ├── __init__.py
│   │   └── __pycache__
│   │       └── __init__.cpython-35.pyc
│   ├── models.py
│   ├── __pycache__
│   │   ├── admin.cpython-35.pyc
│   │   ├── __init__.cpython-35.pyc
│   │   └── models.cpython-35.pyc
│   ├── tests.py
│   └── views.py
├── goods--------------------------------------->商品管理模块
│   ├── admin.py
│   ├── apps.py
│   ├── __init__.py
│   ├── migrations
│   │   ├── __init__.py
│   │   └── __pycache__
│   │       └── __init__.cpython-35.pyc
│   ├── models.py
│   ├── __pycache__
│   │   ├── admin.cpython-35.pyc
│   │   ├── __init__.cpython-35.pyc
│   │   └── models.cpython-35.pyc
│   ├── tests.py
│   └── views.py
├── index---------------------------------------->主页模块
│   ├── admin.py
│   ├── apps.py
│   ├── __init__.py
│   ├── migrations
│   │   ├── __init__.py
│   │   └── __pycache__
│   │       └── __init__.cpython-35.pyc
│   ├── models.py
│   ├── __pycache__
│   │   ├── admin.cpython-35.pyc
│   │   ├── __init__.cpython-35.pyc
│   │   └── models.cpython-35.pyc
│   ├── tests.py
│   └── views.py
├── manage.py--------------------------------------->项目管理程序,运行,迁移数据库,创建应用等 
├── orders------------------------------------------>订单管理模块
│   ├── admin.py
│   ├── apps.py
│   ├── __init__.py
│   ├── migrations
│   │   ├── __init__.py
│   │   └── __pycache__
│   │       └── __init__.cpython-35.pyc
│   ├── models.py
│   ├── __pycache__
│   │   ├── admin.cpython-35.pyc
│   │   ├── __init__.cpython-35.pyc
│   │   └── models.cpython-35.pyc
│   ├── tests.py
│   └── views.py
└── users-------------------------------------------->用户登录认证模块
    ├── admin.py
    ├── apps.py
    ├── __init__.py
    ├── migrations
    │   ├── __init__.py
    │   └── __pycache__
    │       └── __init__.cpython-35.pyc
    ├── models.py
    ├── __pycache__
    │   ├── admin.cpython-35.pyc
    │   ├── __init__.cpython-35.pyc
    │   └── models.cpython-35.pyc
    ├── tests.py
    └── views.py

26 directories, 75 files


三.启用超级管理员模块
	1.python manage.py createsuperuser
	2.创建的账号,密码
		http://127.0.0.1:8000/admin/
		账号:cms
		密码:aid1808cms

四.主配置文件配置
	
1.mysql数据库配置

#引入pymysql模块
import pymysql
#转换数据库支持
pymysql.install_as_MySQLdb()

# MYSQL数据库配置如下：
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'cms',
        'USER': 'root',
        'PASSWORD': '123456',
        'HOST': '127.0.0.1',
        'PORT': '3306',
    }
}

2.注册应用
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'index',
    'users',
    'chart',
    'dgshowdata',
    'orders',
    'goods',
]


3.语言和时区配置

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

五.定义url (cms/urls.py)

from django.conf.urls import url,include
from django.contrib import admin

urlpatterns = [
    url(r'^admin/', admin.site.urls),
    url(r'',include('index.urls',namespace= 'index')),
    url(r'^users', include('users.urls', namespace='users')),
    url(r'^chart', include('chart.urls', namespace='chart')),
    url(r'^goods', include('goods.urls', namespace='goods')),
    url(r'^orders', include('orders.urls', namespace='orders')),
    url(r'^dgshowdata', include('dgshowdata.urls', namespace='dgshowdata')),
]

六.创建数据库模型

1.用户表(如果使用内置的认证模块就不需要单独创建了)
	class GoodType(models.Model):
    """定义商品类别"""
    name = models.CharField(max_length=15)

    def __str__(self):
        return self.name

class Good(models.Model):
    """这是商品管理的模型"""
    goods_type = models.ForeignKey(GoodType)
    goods_name = models.CharField(max_length=15)
    last_price = models.FloatField()
    add_people = models.ForeignKey(User)
    update_time = models.DateTimeField(auto_now_add=True)
    recent_sell = models.DateField(blank=True, null=True)
    is_delete = models.BooleanField(default=False)

    def __str__(self):
        """返回物品名称"""
        return self.goods_name


class Order(models.Model):
    """定义订单模型"""
    name = models.CharField(max_length=20)
    customer = models.CharField(max_length=10, default='无')
    phonenumber = models.CharField(max_length=13, default='无')
    address = models.CharField(max_length=50, default='无')
    goods = models.TextField(blank=True, null=True)
    total_prices = models.FloatField(default=0)
    total_profit = models.FloatField(default=0)
    is_delete = models.BooleanField(default=False)
    c_date = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.name


class Shop(models.Model):
    """定义门店类型"""
    name = models.CharField(max_length=15)
    boss = models.ForeignKey(User)  # 老板

    def __str__(self):
        """显示子门店名称"""
        return self.name


class GoodsShop(models.Model):
    """子门店"""
    goods = models.ForeignKey(Good)
    shop = models.ForeignKey(Shop)
    last_updater = models.ForeignKey(User)
    last_update_date = models.DateTimeField(auto_now=True)

    def __str__(self):
        return u"%s--%s" % (self.shop, self.goods)

class Inventory(models.Model):
    """定义货物清单"""
    goods = models.ForeignKey(Good)
    shop = models.ForeignKey(Shop)
    change_num = models.IntegerField()
    updater = models.ForeignKey(User)
    date = models.DateTimeField(auto_now=True)

    def __str__(self):
        return u"%s--%s" % (self.shop, self.goods)

class GoodsSellRecord(models.Model):
    """商品销售记录"""
    goods = models.ForeignKey(Good)
    shop = models.ForeignKey(Shop)
    sell_num = models.IntegerField()
    origin_price = models.FloatField()
    sell_price = models.FloatField()
    customer = models.CharField(max_length=10, default='无')
    phonenumber = models.CharField(max_length=13, default='无')
    address = models.CharField(max_length=50, default='无')
    order = models.ForeignKey(Order, blank=True, null=True)
    is_delete = models.BooleanField(default=False)
    updater = models.ForeignKey(User)
    date = models.DateTimeField(auto_now_add=True)

    def get_profit(self):
        profit = (self.sell_price-self.origin_price) * self.sell_num
        return profit

    def get_receivable(self):
        receivable = self.sell_num * self.sell_price
        return receivable

    def __str__(self):
        return u"%s--%s" % (self.shop, self.goods)



class GoodsAddRecord(models.Model):
    """库存增加记录"""
    goods = models.ForeignKey(Good)
    shop = models.ForeignKey(Shop)
    num = models.IntegerField()
    price = models.FloatField()
    updater = models.ForeignKey(User)
    date = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return u"%s--%s" % (self.shop, self.goods)


数据库模型关系


店铺    --------------> 子店铺       

订单    --------------> 销售订单


商品   	-------------->商品类别 		
		-------------->商品表
		-------------->商品添加记录表
		-------------->商品销售记录表
 



